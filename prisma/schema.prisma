//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

/// User model
model User {
  id                String         @id() @default(cuid())
  email             String         @unique()
  username          String         @unique()
  phoneNumber       String         @unique()
  verifiedEmail     Boolean        @default(false)
  verifiedPhone     Boolean        @default(false)
  preferredMfa      String         @default("email")
  otpSecret         String?
  otpExpiry         DateTime?
  posts             Post[]
  imagePosts        ImagePost[]
  events            Event[]
  followedBy        Follow[]       @relation("follower")
  following         Follow[]       @relation("following")
  likes             Like[]
  notifications     Notification[] @relation("userNotifications")
  notificationsSent Notification[] @relation("notificationSender")
}

/// Like model for post likes
model Like {
  id          String     @id() @default(cuid())
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  post        Post?      @relation(fields: [postId], references: [id])
  postId      String?
  imagePost   ImagePost? @relation(fields: [imagePostId], references: [id])
  imagePostId String?

  @@unique([userId, postId])
  @@unique([userId, imagePostId])
}

/// Notification model
model Notification {
  id          String   @id() @default(cuid())
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)
  type        String
  message     String
  postId      String?
  imagePostId String?
  user        User     @relation("userNotifications", fields: [userId], references: [id])
  userId      String
  sender      User?    @relation("notificationSender", fields: [senderId], references: [id])
  senderId    String?
}

/// Follow relationship model
model Follow {
  id         String   @id() @default(cuid())
  createdAt  DateTime @default(now())
  followedId String
  followed   User     @relation("follower", fields: [followedId], references: [id])
  followerId String
  follower   User     @relation("following", fields: [followerId], references: [id])

  @@unique([followerId, followedId])
}

/// Post model
model Post {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  title     String
  content   String
  published Boolean  @default(false)
  image     String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
  likes     Like[]
}

model ImagePost {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  image     String
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
  likes     Like[]
}

/// Gun Show Event model
model Event {
  id          String      @id() @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()
  title       String
  description String
  date        DateTime
  location    String
  organizer   String
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  posts       Post[]
  imagePosts  ImagePost[]
}
