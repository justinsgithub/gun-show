/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ImagePost } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateImagePost(options?: Omit<(UseMutationOptions<(ImagePost | undefined), DefaultError, Prisma.ImagePostCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImagePostCreateArgs, DefaultError, ImagePost, true>('ImagePost', 'POST', `${endpoint}/imagePost/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImagePostCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImagePostCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ImagePost, Prisma.ImagePostGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ImagePostCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ImagePost, Prisma.ImagePostGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyImagePost(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ImagePostCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImagePostCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ImagePost', 'POST', `${endpoint}/imagePost/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImagePostCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImagePostCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ImagePostCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyImagePost<TArgs extends Prisma.ImagePostFindManyArgs, TQueryFnData = Array<Prisma.ImagePostGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImagePostFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/findMany`, args, options, fetch);
}

export function useInfiniteFindManyImagePost<TArgs extends Prisma.ImagePostFindManyArgs, TQueryFnData = Array<Prisma.ImagePostGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImagePostFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/findMany`, args, options, fetch);
}

export function useSuspenseFindManyImagePost<TArgs extends Prisma.ImagePostFindManyArgs, TQueryFnData = Array<Prisma.ImagePostGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImagePostFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyImagePost<TArgs extends Prisma.ImagePostFindManyArgs, TQueryFnData = Array<Prisma.ImagePostGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImagePostFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/findMany`, args, options, fetch);
}

export function useFindUniqueImagePost<TArgs extends Prisma.ImagePostFindUniqueArgs, TQueryFnData = Prisma.ImagePostGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ImagePostFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueImagePost<TArgs extends Prisma.ImagePostFindUniqueArgs, TQueryFnData = Prisma.ImagePostGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ImagePostFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/findUnique`, args, options, fetch);
}

export function useFindFirstImagePost<TArgs extends Prisma.ImagePostFindFirstArgs, TQueryFnData = Prisma.ImagePostGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImagePostFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstImagePost<TArgs extends Prisma.ImagePostFindFirstArgs, TQueryFnData = Prisma.ImagePostGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImagePostFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/findFirst`, args, options, fetch);
}

export function useUpdateImagePost(options?: Omit<(UseMutationOptions<(ImagePost | undefined), DefaultError, Prisma.ImagePostUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImagePostUpdateArgs, DefaultError, ImagePost, true>('ImagePost', 'PUT', `${endpoint}/imagePost/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImagePostUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImagePostUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ImagePost, Prisma.ImagePostGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ImagePostUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ImagePost, Prisma.ImagePostGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyImagePost(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ImagePostUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImagePostUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ImagePost', 'PUT', `${endpoint}/imagePost/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImagePostUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImagePostUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ImagePostUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertImagePost(options?: Omit<(UseMutationOptions<(ImagePost | undefined), DefaultError, Prisma.ImagePostUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImagePostUpsertArgs, DefaultError, ImagePost, true>('ImagePost', 'POST', `${endpoint}/imagePost/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImagePostUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImagePostUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ImagePost, Prisma.ImagePostGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ImagePostUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ImagePost, Prisma.ImagePostGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteImagePost(options?: Omit<(UseMutationOptions<(ImagePost | undefined), DefaultError, Prisma.ImagePostDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImagePostDeleteArgs, DefaultError, ImagePost, true>('ImagePost', 'DELETE', `${endpoint}/imagePost/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImagePostDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImagePostDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ImagePost, Prisma.ImagePostGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ImagePostDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ImagePost, Prisma.ImagePostGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyImagePost(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ImagePostDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ImagePostDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ImagePost', 'DELETE', `${endpoint}/imagePost/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ImagePostDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ImagePostDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ImagePostDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateImagePost<TArgs extends Prisma.ImagePostAggregateArgs, TQueryFnData = Prisma.GetImagePostAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ImagePostAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateImagePost<TArgs extends Prisma.ImagePostAggregateArgs, TQueryFnData = Prisma.GetImagePostAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ImagePostAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/aggregate`, args, options, fetch);
}

export function useGroupByImagePost<TArgs extends Prisma.ImagePostGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ImagePostGroupByArgs['orderBy'] } : { orderBy?: Prisma.ImagePostGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ImagePostGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ImagePostGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ImagePostGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ImagePostGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ImagePostGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByImagePost<TArgs extends Prisma.ImagePostGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ImagePostGroupByArgs['orderBy'] } : { orderBy?: Prisma.ImagePostGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ImagePostGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ImagePostGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ImagePostGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ImagePostGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ImagePostGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/groupBy`, args, options, fetch);
}

export function useCountImagePost<TArgs extends Prisma.ImagePostCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ImagePostCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImagePostCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/count`, args, options, fetch);
}

export function useSuspenseCountImagePost<TArgs extends Prisma.ImagePostCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ImagePostCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ImagePostCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ImagePost', `${endpoint}/imagePost/count`, args, options, fetch);
}

export function useCheckImagePost<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; content?: string; published?: boolean; authorId?: string; image?: string; eventId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ImagePost', `${endpoint}/imagePost/check`, args, options, fetch);
}
