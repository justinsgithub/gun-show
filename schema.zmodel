// This is a sample model to get you started.

/// A sample data source using local sqlite db.
datasource db {
    provider = 'sqlite'
    url = 'file:./dev.db'
}

generator client {
    provider = "prisma-client-js"
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  version = 'v5'
  output = "./src/lib/hooks"
}

/// User model
model User {
    id             String @id @default(cuid())
    email          String @unique @email @length(6, 32)
    username       String @unique @length(3, 20)
    phoneNumber    String @unique
    verifiedEmail  Boolean @default(false)
    verifiedPhone  Boolean @default(false)
    preferredMfa   String @default("email") // "email" or "phone"
    otpSecret      String?  // For storing current OTP
    otpExpiry      DateTime? // OTP expiration timestamp
    posts          Post[]
    imagePosts     ImagePost[]
    events         Event[]  // User can create events
    
    // Follow relationships
    followedBy Follow[] @relation("follower")
    following  Follow[] @relation("following")
    
    // Likes relationships
    likes      Like[]
    
    // Notifications
    notifications      Notification[] @relation("userNotifications")
    notificationsSent  Notification[] @relation("notificationSender")
    
    // everybody can signup
    @@allow('create', true)

    // full access by self
    @@allow('all', auth() == this)
}

/// Like model for post likes
model Like {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    
    // User who liked the post
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    
    // Post that was liked (can be null if it was an ImagePost)
    post       Post?    @relation(fields: [postId], references: [id])
    postId     String?
    
    // ImagePost that was liked (can be null if it was a regular Post)
    imagePost  ImagePost? @relation(fields: [imagePostId], references: [id])
    imagePostId String?
    
    // Ensure a user can only like a post once
    @@unique([userId, postId])
    @@unique([userId, imagePostId])
    
    // Allow a user to like/unlike posts
    @@allow('create,delete', auth() == user)
    
    // Allow read access to post author and the liker
    @@allow('read', post.author == auth() || imagePost.author == auth() || user == auth())
}

/// Notification model
model Notification {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    read       Boolean  @default(false)
    type       String   // e.g., "like", "follow", "comment"
    message    String
    
    // Link to the related content
    postId     String?  // Optional: ID of the related post
    imagePostId String? // Optional: ID of the related image post
    
    // User who receives the notification
    user       User     @relation("userNotifications", fields: [userId], references: [id])
    userId     String
    
    // User who triggered the notification (e.g., who liked the post)
    sender     User?    @relation("notificationSender", fields: [senderId], references: [id])
    senderId   String?
    
    // Allow the recipient to read and update their notifications
    @@allow('read,update', user == auth())
    
    // Allow creation by the system (null check) or the sender
    @@allow('create', auth() == null || sender == auth())
}

/// Follow relationship model
model Follow {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    
    // The user being followed
    followedId String
    followed   User     @relation("follower", fields: [followedId], references: [id])
    
    // The user who is following
    followerId String
    follower   User     @relation("following", fields: [followerId], references: [id])
    
    // Prevent duplicate follow relationships
    @@unique([followerId, followedId])
    
    // Allow a user to follow and unfollow others
    @@allow('create,delete', auth() == follower)
    
    // Allow both users to read the relationship
    @@allow('read', auth() == follower || auth() == followed)
}

/// Post model
model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String   @length(1, 256)
    content   String
    published Boolean  @default(false)
    image     String?  // Optional image field to store base64 images
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    event     Event?   @relation(fields: [eventId], references: [id])
    eventId   String?
    likes     Like[]   // Relation to likes
    
    // allow read for all signin users
    @@allow('read', auth() != null && published)

    // full access by author
    @@allow('all', author == auth())
}

// make this allow image uploads
model ImagePost {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String   @length(1, 256)
    content   String
    published Boolean  @default(false)
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    image     String
    event     Event?   @relation(fields: [eventId], references: [id])
    eventId   String?
    likes     Like[]   // Relation to likes
    
    // allow read for all signin users
    @@allow('read', auth() != null && published)

    // full access by author
    @@allow('all', author == auth())
}

/// Gun Show Event model
model Event {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    title       String      @length(1, 256)
    description String
    date        DateTime
    location    String
    organizer   String
    author      User        @relation(fields: [authorId], references: [id])
    authorId    String
    posts       Post[]
    imagePosts  ImagePost[]
    
    // Allow read access to everyone for public events
    @@allow('read', true)
    
    // Only the creator can update or delete events
    @@allow('create,update,delete', author == auth())
}
